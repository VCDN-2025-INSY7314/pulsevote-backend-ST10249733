const jwt = require("jsonwebtoken");        // Used to generate JSON Web Tokens
const User = require("../models/User");     // Import the User model created earlier

// This helper function generates a JWT token for a user based on thier ID
const generateToken = (userId) => 
    jwt.sign({ id: userId },        // Payload: includes user's ID 
        process.env.JWT_SECRET,     // Secret key from .env for signing the token 
        {expiresIn: "1h"});         // Token will expire in 1 hour

exports.register = async (req, res) => {
    const { email, password } = req.body;       // Extract email and password from the request body
    
    try {
        // Check if a user with the given email already exists
        const existing = await User.findOne({ email });
        if (existing) return res.status(400).json({ message: "Email already exists" });

        // If not, create a new user. Password is hashed automatically in the model
        const user = await User.create({ email, password });

        // Return a 201 (Created) response with the token
        const token = generateToken(user._id);
        res.status(201).json({token});

    } catch (err) {
        console.error("Register Error:", err);  // For register
        // Catch any unexpected error and send a 500 (Server error) response
        res.status(500).json({ error: "Server Error"});
    }
};

exports.login = async (req, res) => {
    const { email, password} = req.body;        // Get login credentials from the request body
    try {
        // Try to find a user with the given email
        const user = await User.findOne({ email });

        // If user deosn't exist or password is incorrect, return an error
        if (!user || !(await user.comparePassword(password))) {
            return res.status(400).json({ message: "Invalid credentials "});
        }

        // If login is unsuccessful, generate a token
        const token = generateToken(user._id);

        // Return the token in the response
        res.json({token});
    } catch (err) {
        console.error("Login Error:", err);
        // Catch any server-side errors
        res.status(500).json({ error: "Server error" });
    }
};